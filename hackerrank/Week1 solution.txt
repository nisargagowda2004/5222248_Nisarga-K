//plus minus
#include <stdio.h>

void plusMinus(int arr_count, int* arr) {
    int positive = 0, negative = 0, zero = 0;

    for (int i = 0; i < arr_count; i++) {
        if (arr[i] > 0) {
            positive++;
        } else if (arr[i] < 0) {
            negative++;
        } else {
            zero++;
        }
    }

    printf("%.6f\n", (double)positive / arr_count);
    printf("%.6f\n", (double)negative / arr_count);
    printf("%.6f\n", (double)zero / arr_count);
}

int main() {
    int n;
    scanf("%d", &n);

    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    plusMinus(n, arr);

    return 0;
}


//minmax
#include <stdio.h>

void miniMaxSum(int arr_count, int* arr) {
    long long total_sum = 0;
    long long min = arr[0], max = arr[0];

    for (int i = 0; i < arr_count; i++) {
        total_sum += arr[i];
        if (arr[i] < min) {
            min = arr[i];
        }
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    printf("%lld %lld\n", total_sum - max, total_sum - min);
}

int main() {
    int arr[5];
    for (int i = 0; i < 5; i++) {
        scanf("%d", &arr[i]);
    }

    miniMaxSum(5, arr);

    return 0;
}

//time conversion
#include <stdio.h>
#include <string.h>
void timeConversion(char* s){
    char ampm[3];
    int hour, min, sec;
    sscanf(s, "%2d:%2d:%2d%s", &hour, &min, &sec, ampm);
    if(strcmp(ampm, "PM")==0 && hour!=12){
        hour+=12;
    }else if(strcmp(ampm, "AM")==0 && hour==12){
        hour=0;
    }
    printf("%02d:%02d:%02d\n", hour, min, sec);
}
int main(){
    char s[11];
    scanf("%s", s);
    timeConversion(s);
    return 0;
}


//sparse arrays
#include <stdio.h>
#include <string.h>

int main() {
    int n, q;
     scanf("%d", &n);
    char strings[n][21]; 
    
    for (int i = 0; i < n; i++) {
        scanf("%s", strings[i]);
    }
      scanf("%d", &q);
    char queries[q][21]; 
    
  for (int i = 0; i < q; i++) {
        scanf("%s", queries[i]);
    }
     for (int i = 0; i < q; i++) {
        int count = 0;
      for (int j = 0; j < n; j++) {
                 if (strcmp(queries[i], strings[j]) == 0) {
                count++;
            }
        }

        printf("%d\n", count);
    }
    
    return 0;
}

// lonely integer
#include <stdio.h>
int lonelyinteger(int a_count, int* a){
    int result=0;
    for(int i=0; i<a_count; i++){
        result^=a[i];
    }
    return result;
}
int main(){
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0; i<n; i++){
        scanf("%d",&arr[i]);
    }
    int unique_element=lonelyinteger(n,arr);
    printf("%d\n",unique_element);
    return 0;
}

//flipping bits
#include <stdio.h>
#include <stdint.h>
uint32_t flippingbits(uint32_t n){
    return ~n;
}
int main(){
    int q;
    scanf("%d",&q);
    while(q--){
        uint32_t n;
        scanf("%u",&n);
        uint32_t result=flippingbits(n);
        printf("%u\n",result);
    }
    return 0;
}

//diagonal difference
#include <stdio.h>
#include <stdlib.h>
int diagonaldifference(int arr_rows, int arr_cols, int** arr)
{
    int primary_diagonal_sum =0;
    int secondary_diagonal_sum=0;
    int n =arr_rows;
    for(int i=0;i<n;i++){
        primary_diagonal_sum += arr[i][i];
        secondary_diagonal_sum += arr[i][n-1-i];
    }
    return abs(primary_diagonal_sum-secondary_diagonal_sum);
}
int main(){
    int n;
    scanf("%d",&n);
    int** arr=(int*)malloc(n*sizeof(int));
    for(int i=0;i<n;i++){
        arr[i]=(int*)malloc(n*sizeof(int));
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            scanf("%d",&arr[i][j]);
        }
    }
    int result =diagonaldifference(n,n,arr);
    printf("%d\n",result);
    for(int i=0;i<n;i++){
        free(arr[i]);
    }free(arr);
    return 0;
}

//counting sort
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
int* countingSort(int arr_count, int* arr, int* result_count){
int*  frequency_array=(int*)calloc(100,sizeof(int));
if(frequency_array==NULL){
    *result_count=0;
    return NULL;
}
for(int i=0; i<arr_count; i++){
    int value=arr[i];
    frequency_array[value]++;
}
*result_count=100;
return frequency_array;
}
int main() {
    int n;
    scanf("%d",&n);
    int* arr=(int*)malloc(n*sizeof(int));
    if(arr==NULL){
        return 1;
    }
    for(int i=0; i<n; i++){
        scanf("%d", &arr[i]);
    }
    int result_count;
    int* result=countingSort(n, arr, &result_count);
    if(result!=NULL){
        for(int i=0; i< result_count; i++ ){
            printf("%d ",result[i]);
        }
        printf("\n");
        free(result);
    }
    free(arr);
    return 0;
}

//pangrams
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
const char*
pangrams(const char* s){
    int alphabet_present[26]={0};
    for(int i=0;s[i]!='\0';i++){
        char c =tolower(s[i]);
        if(c>='a' && c<='z'){
            alphabet_present[c-'a']=1;
        }
    }
    for(int i=0;i<26;i++){
        if (alphabet_present[i] == 0){
            return "not pangram";
        }
    }
    return "pangram";
}
int main(){
    char s[1001];
    if(fgets(s, sizeof(s),stdin)==NULL){
        return 1;
    }
    s[strcspn(s, "\n")]=0;
    const char* result=pangrams(s);
    printf("%s\n",result);
    return 0;
}

//permuting two arrays
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int compare_ascending(const void*a, const void*b){
    if(*(int*)a<*(int*)b){
        return -1;
    }
    if(*(int*)a>*(int*)b){
        return 1;
    }
    return 0;
}
int compare_descending(const void*a, const void*b){
    if(*(int*)a<*(int*)b){
        return 1;
    }
    if(*(int*)a>*(int*)b){
        return -1;
    }
    return 0;
}
const char*twoArrays(int k,int n,int*A,int*B){
    qsort(A,n,sizeof(int),compare_ascending);
    qsort(B,n,sizeof(int),compare_descending);
    for(int i=0;i<n;i++){
        if((long long)A[i]+B[i]<k){
            return "NO";
        }
    }
    return "YES";
}
int main(){
    int q;
    scanf("%d",&q);
    while(q--){
        int n,k;
        scanf("%d%d",&n,&k);
        int*A=(int*)malloc(n*sizeof(int));
        int*B=(int*)malloc(n*sizeof(int));
        for(int i=0;i<n;i++){
            scanf("%d",&A[i]);
        }
        for(int i=0;i<n;i++){
            scanf("%d",&B[i]);
        }
        printf("%s\n",twoArrays(k,n,A,B));
        free(A);
        free(B);
    }
    return 0;
}

//subarray division 1
#include<stdio.h>
#include<stdlib.h>
int birthday (int n, int* s, int d, int m){
    int count=0;
    for(int i=0;i<=n-m;i++){
        int sum=0;
        for(int j=i;j<i+m;j++){
            sum +=s[j];
        }
        if(sum == d){
            count++;
        }
    }
    return count;
}
int main(){
    int n;
    scanf("%d",&n);
    int* s=(int*)malloc(n* sizeof(int));
    for(int i=0;i<n;i++){
        scanf("%d",&s[i]);
    }
    int d,m;
    scanf("%d%d",&d,&m);
    int result = birthday(n,s,d,m);
    printf("%d\n",result);
    free(s);
    return 0;
}
//xorstrings 2
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char* strings_xor(char* s, char* t) {
    int len = strlen(s);
    char* result = (char*)malloc(len + 1); // +1 for the null terminator
    
    if (result == NULL) {
        return NULL; // Handle memory allocation failure
    }
    
    for (int i = 0; i < len; i++) {
        if (s[i] == t[i]) {
            result[i] = '0';
        } else {
            result[i] = '1';
        }
    }
    
    result[len] = '\0'; // Add null terminator
    
    return result;
}

int main() {
    char s[10001];
    char t[10001];
    
    scanf("%s", s);
    scanf("%s", t);
    
    char* xor_result = strings_xor(s, t);
    
    if (xor_result != NULL) {
        printf("%s\n", xor_result);
        free(xor_result);
    }
    
    return 0;
}